{"ast":null,"code":"var _jsxFileName = \"/home/colin/Downloads/react-tut/stock_react/react_app/src/ZoomableLineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, scaleLinear, line, max, curveCardinal, axisBottom, axisLeft, zoom, scaleTime } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction max_price(prices) {\n  let max_price = -1;\n  prices.forEach(price => {\n    if (price.value > max_price) {\n      max_price = price.value;\n    }\n  });\n  return max_price;\n}\n\nfunction ZoomableLineChart({\n  data,\n  id = \"myZoomableLineChart\"\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //fixing raw stock data\n\n  var prices = [];\n  data[0][\"values\"].forEach(v => {\n    prices.push({\n      datetime: Date.parse(v[\"datetime\"]),\n      value: Number(v[\"open\"])\n    });\n  });\n  prices = prices.reverse();\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const svgContent = svg.select(\".content\");\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // scales + line generator\n\n    const xScale = scaleTime().domain([prices.at(0).datetime, prices.at(-1).datetime]).range([0, width]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale);\n      xScale.domain(newXScale.domain());\n    }\n\n    const yScale = scaleLinear().domain([0, max_price(prices)]).range([height, 0]); // const lineGenerator = line()\n    //   .x((d, index) => xScale(index))\n    //   .y((d) => yScale(d))\n    //   .curve(curveCardinal);\n    //\n    // // render the line\n    // svgContent\n    //   .selectAll(\".myLine\")\n    //   .data([prices])\n    //   .join(\"path\")\n    //   .attr(\"class\", \"myLine\")\n    //   .attr(\"stroke\", \"black\")\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"d\", lineGenerator);\n    //\n    // svgContent\n    //   .selectAll(\".myDot\")\n    //   .data(prices)\n    //   .join(\"circle\")\n    //   .attr(\"class\", \"myDot\")\n    //   .attr(\"stroke\", \"black\")\n    //   .attr(\"r\", 1)\n    //   .attr(\"fill\", \"blue\")\n    //   .attr(\"cx\", (value, index) => xScale(index))\n    // .attr(\"cy\", yScale);\n    // svgContent.selectAll(\"path\").remove();\n\n    svgContent.append(\"path\").datum(prices).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", line().x(function (d) {\n      return xScale(d.datetime);\n    }).y(function (d) {\n      return yScale(d.value);\n    })); // axes\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n    const yAxis = axisLeft(yScale);\n    svg.select(\".y-axis\").call(yAxis); // zoom\n\n    const zoomBehavior = zoom().scaleExtent([1, 500]).translateExtent([[0, 0], [width, height]]).on(\"zoom\", event => {\n      const zoomState = event.transform;\n      setCurrentZoomState(zoomState);\n    });\n    svg.call(zoomBehavior);\n  }, [currentZoomState, data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"APPL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      style: {\n        marginBottom: \"2rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"clipPath\", {\n            id: id,\n            children: /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: \"0\",\n              y: \"0\",\n              width: \"100%\",\n              height: \"100%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"content\",\n          clipPath: `url(#${id})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"y-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ZoomableLineChart, \"/KiWkGO4xuCDaFbcDOaAf23vnZg=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = ZoomableLineChart;\nexport default ZoomableLineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ZoomableLineChart\");","map":{"version":3,"sources":["/home/colin/Downloads/react-tut/stock_react/react_app/src/ZoomableLineChart.js"],"names":["React","useRef","useEffect","useState","select","scaleLinear","line","max","curveCardinal","axisBottom","axisLeft","zoom","scaleTime","useResizeObserver","max_price","prices","forEach","price","value","ZoomableLineChart","data","id","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","v","push","datetime","Date","parse","Number","reverse","svg","current","svgContent","width","height","getBoundingClientRect","xScale","domain","at","range","newXScale","rescaleX","yScale","append","datum","attr","x","d","y","xAxis","call","yAxis","zoomBehavior","scaleExtent","translateExtent","on","event","zoomState","transform","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport {\n  select,\n  scaleLinear,\n  line,\n  max,\n  curveCardinal,\n  axisBottom,\n  axisLeft,\n  zoom,\n  scaleTime\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction max_price(prices){\n  let max_price = -1;\n  prices.forEach((price) => {\n    if(price.value > max_price){\n      max_price = price.value;\n    }\n  });\n  return max_price;\n}\n\nfunction ZoomableLineChart({ data, id = \"myZoomableLineChart\" }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //fixing raw stock data\n  var prices = [];\n  data[0][\"values\"].forEach((v) => {\n    prices.push({datetime: Date.parse(v[\"datetime\"]),value: Number(v[\"open\"])});\n  });\n  prices = prices.reverse();\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const svgContent = svg.select(\".content\");\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // scales + line generator\n\n    const xScale = scaleTime()\n      .domain([prices.at(0).datetime, prices.at(-1).datetime])\n      .range([0, width]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale);\n      xScale.domain(newXScale.domain());\n    }\n\n    const yScale = scaleLinear()\n      .domain([0, max_price(prices)])\n      .range([height,0]);\n\n    // const lineGenerator = line()\n    //   .x((d, index) => xScale(index))\n    //   .y((d) => yScale(d))\n    //   .curve(curveCardinal);\n    //\n    // // render the line\n    // svgContent\n    //   .selectAll(\".myLine\")\n    //   .data([prices])\n    //   .join(\"path\")\n    //   .attr(\"class\", \"myLine\")\n    //   .attr(\"stroke\", \"black\")\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"d\", lineGenerator);\n    //\n    // svgContent\n    //   .selectAll(\".myDot\")\n    //   .data(prices)\n    //   .join(\"circle\")\n    //   .attr(\"class\", \"myDot\")\n    //   .attr(\"stroke\", \"black\")\n    //   .attr(\"r\", 1)\n    //   .attr(\"fill\", \"blue\")\n    //   .attr(\"cx\", (value, index) => xScale(index))\n      // .attr(\"cy\", yScale);\n\n      // svgContent.selectAll(\"path\").remove();\n\n      svgContent.append(\"path\")\n            .datum(prices)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", line()\n              .x(function(d) { return xScale(d.datetime) })\n              .y(function(d) { return yScale(d.value) })\n            );\n\n    // axes\n    const xAxis = axisBottom(xScale);\n    svg\n      .select(\".x-axis\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(xAxis);\n\n    const yAxis = axisLeft(yScale);\n    svg.select(\".y-axis\").call(yAxis);\n\n    // zoom\n    const zoomBehavior = zoom()\n      .scaleExtent([1, 500])\n      .translateExtent([\n        [0, 0],\n        [width, height],\n      ])\n      .on(\"zoom\", (event) => {\n        const zoomState = event.transform;\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.call(zoomBehavior);\n\n  }, [currentZoomState, data, dimensions]);\n\n  return (\n    <React.Fragment>\n      <h1>APPL</h1>\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n        <svg ref={svgRef}>\n          <defs>\n            <clipPath id={id}>\n              <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />\n            </clipPath>\n          </defs>\n          <g className=\"content\" clipPath={`url(#${id})`}></g>\n          <g className=\"x-axis\" />\n          <g className=\"y-axis\" />\n        </svg>\n      </div>\n    </React.Fragment>\n\n  );\n}\n\nexport default ZoomableLineChart;\n"]},"metadata":{},"sourceType":"module"}