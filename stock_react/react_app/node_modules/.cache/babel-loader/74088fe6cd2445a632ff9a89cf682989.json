{"ast":null,"code":"var _jsxFileName = \"/home/colin/Downloads/react-tut/stock_react/react_app/src/ZoomableLineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, scaleLinear, line, max, curveCardinal, axisBottom, axisLeft, zoom, scaleTime } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ZoomableLineChart({\n  data,\n  id = \"myZoomableLineChart\"\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState(); //fixing raw stock data\n\n  var prices = [];\n  data[0][\"values\"].forEach(v => {\n    let price = null;\n    price.datetime = Number(v[\"datetime\"]);\n    price.value = Number(v[\"open\"]);\n    prices.push(price);\n  });\n  prices = prices.reverse(); // var dates = [];\n  // data[0][\"values\"].forEach((v) => {\n  //   dates.push(v[\"datetime\"]);\n  // });\n  // dates = dates.reverse();\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const svgContent = svg.select(\".content\");\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // scales + line generator\n\n    console.log(dates);\n    console.log(Date(dates[0]));\n    console.log(Date(dates[dates.length - 1]));\n    const xScale = scaleTime().domain([Date.parse(dates[0]), Date.parse(dates[dates.length - 1])]).range([0, width]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale);\n      xScale.domain(newXScale.domain());\n    }\n\n    const yScale = scaleLinear().domain([0, max(prices)]).range([height, 0]);\n    const lineGenerator = line().x((d, index) => xScale(index)).y(d => yScale(d)).curve(curveCardinal); // render the line\n\n    svgContent.selectAll(\".myLine\").data([prices]).join(\"path\").attr(\"class\", \"myLine\").attr(\"stroke\", \"black\").attr(\"fill\", \"none\").attr(\"d\", lineGenerator);\n    svgContent.selectAll(\".myDot\").data(prices).join(\"circle\").attr(\"class\", \"myDot\").attr(\"stroke\", \"black\").attr(\"r\", 1).attr(\"fill\", \"blue\").attr(\"cx\", (value, index) => xScale(index)).attr(\"cy\", yScale); // axes\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n    const yAxis = axisLeft(yScale);\n    svg.select(\".y-axis\").call(yAxis); // zoom\n\n    const zoomBehavior = zoom().scaleExtent([1, 500]).translateExtent([[0, 0], [width, height]]).on(\"zoom\", event => {\n      const zoomState = event.transform;\n      setCurrentZoomState(zoomState);\n    });\n    svg.call(zoomBehavior);\n  }, [currentZoomState, data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"APPL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      style: {\n        marginBottom: \"2rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"clipPath\", {\n            id: id,\n            children: /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: \"0\",\n              y: \"0\",\n              width: \"100%\",\n              height: \"100%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"content\",\n          clipPath: `url(#${id})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"y-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ZoomableLineChart, \"/KiWkGO4xuCDaFbcDOaAf23vnZg=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = ZoomableLineChart;\nexport default ZoomableLineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ZoomableLineChart\");","map":{"version":3,"sources":["/home/colin/Downloads/react-tut/stock_react/react_app/src/ZoomableLineChart.js"],"names":["React","useRef","useEffect","useState","select","scaleLinear","line","max","curveCardinal","axisBottom","axisLeft","zoom","scaleTime","useResizeObserver","ZoomableLineChart","data","id","svgRef","wrapperRef","dimensions","currentZoomState","setCurrentZoomState","prices","forEach","v","price","datetime","Number","value","push","reverse","svg","current","svgContent","width","height","getBoundingClientRect","console","log","dates","Date","length","xScale","domain","parse","range","newXScale","rescaleX","yScale","lineGenerator","x","d","index","y","curve","selectAll","join","attr","xAxis","call","yAxis","zoomBehavior","scaleExtent","translateExtent","on","event","zoomState","transform","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport {\n  select,\n  scaleLinear,\n  line,\n  max,\n  curveCardinal,\n  axisBottom,\n  axisLeft,\n  zoom,\n  scaleTime\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n\nfunction ZoomableLineChart({ data, id = \"myZoomableLineChart\" }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [currentZoomState, setCurrentZoomState] = useState();\n\n  //fixing raw stock data\n  var prices = [];\n  data[0][\"values\"].forEach((v) => {\n\n    let price = null;\n    price.datetime = Number(v[\"datetime\"]);\n    price.value = Number(v[\"open\"]);\n\n    prices.push(price);\n\n  });\n  prices = prices.reverse();\n\n  // var dates = [];\n  // data[0][\"values\"].forEach((v) => {\n  //   dates.push(v[\"datetime\"]);\n  // });\n  // dates = dates.reverse();\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const svgContent = svg.select(\".content\");\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // scales + line generator\n    console.log(dates)\n    console.log(Date(dates[0]));\n    console.log(Date(dates[dates.length-1]));\n\n    const xScale = scaleTime()\n      .domain([Date.parse(dates[0]), Date.parse(dates[dates.length-1])])\n      .range([0, width]);\n\n    if (currentZoomState) {\n      const newXScale = currentZoomState.rescaleX(xScale);\n      xScale.domain(newXScale.domain());\n    }\n\n    const yScale = scaleLinear()\n      .domain([0, max(prices)])\n      .range([height,0]);\n\n    const lineGenerator = line()\n      .x((d, index) => xScale(index))\n      .y((d) => yScale(d))\n      .curve(curveCardinal);\n\n    // render the line\n    svgContent\n      .selectAll(\".myLine\")\n      .data([prices])\n      .join(\"path\")\n      .attr(\"class\", \"myLine\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"fill\", \"none\")\n      .attr(\"d\", lineGenerator);\n\n    svgContent\n      .selectAll(\".myDot\")\n      .data(prices)\n      .join(\"circle\")\n      .attr(\"class\", \"myDot\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"r\", 1)\n      .attr(\"fill\", \"blue\")\n      .attr(\"cx\", (value, index) => xScale(index))\n      .attr(\"cy\", yScale);\n\n    // axes\n    const xAxis = axisBottom(xScale);\n    svg\n      .select(\".x-axis\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(xAxis);\n\n    const yAxis = axisLeft(yScale);\n    svg.select(\".y-axis\").call(yAxis);\n\n    // zoom\n    const zoomBehavior = zoom()\n      .scaleExtent([1, 500])\n      .translateExtent([\n        [0, 0],\n        [width, height],\n      ])\n      .on(\"zoom\", (event) => {\n        const zoomState = event.transform;\n        setCurrentZoomState(zoomState);\n      });\n\n    svg.call(zoomBehavior);\n\n  }, [currentZoomState, data, dimensions]);\n\n  return (\n    <React.Fragment>\n      <h1>APPL</h1>\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n        <svg ref={svgRef}>\n          <defs>\n            <clipPath id={id}>\n              <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />\n            </clipPath>\n          </defs>\n          <g className=\"content\" clipPath={`url(#${id})`}></g>\n          <g className=\"x-axis\" />\n          <g className=\"y-axis\" />\n        </svg>\n      </div>\n    </React.Fragment>\n\n  );\n}\n\nexport default ZoomableLineChart;\n"]},"metadata":{},"sourceType":"module"}