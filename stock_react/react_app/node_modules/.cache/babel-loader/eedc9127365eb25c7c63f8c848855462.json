{"ast":null,"code":"var _jsxFileName = \"/home/colin/Downloads/react-tut/stock_react/react_app/src/ZoomableLineChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, scaleLinear, line, max, curveCardinal, axisBottom, axisLeft, zoom } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n/**\n * Component that renders a ZoomableLineChart\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ZoomableLineChart({\n  data,\n  id = \"myZoomableLineChart\"\n}) {\n  // const svgRef = useRef();\n  // const wrapperRef = useRef();\n  // const dimensions = useResizeObserver(wrapperRef);\n  // const [currentZoomState, setCurrentZoomState] = useState();\n  //\n  // // will be called initially and on every data change\n  // useEffect(() => {\n  //   const svg = select(svgRef.current);\n  //   const svgContent = svg.select(\".content\");\n  //   const { width, height } =\n  //     dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  //   // scales + line generator\n  //   const xScale = scaleLinear()\n  //     .domain([0, data.length - 1])\n  //     .range([10, width - 10]);\n  //\n  //   if (currentZoomState) {\n  //     const newXScale = currentZoomState.rescaleX(xScale);\n  //     xScale.domain(newXScale.domain());\n  //   }\n  //\n  //   const yScale = scaleLinear()\n  //     .domain([0, max(data)])\n  //     .range([height - 10, 10]);\n  //\n  //   const lineGenerator = line()\n  //     .x((d, index) => xScale(index))\n  //     .y((d) => yScale(d))\n  //     .curve(curveCardinal);\n  //\n  //   // render the line\n  //   svgContent\n  //     .selectAll(\".myLine\")\n  //     .data([data])\n  //     .join(\"path\")\n  //     .attr(\"class\", \"myLine\")\n  //     .attr(\"stroke\", \"black\")\n  //     .attr(\"fill\", \"none\")\n  //     .attr(\"d\", lineGenerator);\n  //\n  //   svgContent\n  //     .selectAll(\".myDot\")\n  //     .data(data)\n  //     .join(\"circle\")\n  //     .attr(\"class\", \"myDot\")\n  //     .attr(\"stroke\", \"black\")\n  //     .attr(\"r\", 4)\n  //     .attr(\"fill\", \"orange\")\n  //     .attr(\"cx\", (value, index) => xScale(index))\n  //     .attr(\"cy\", yScale);\n  //\n  //   // axes\n  //   const xAxis = axisBottom(xScale);\n  //   svg\n  //     .select(\".x-axis\")\n  //     .attr(\"transform\", `translate(0, ${height})`)\n  //     .call(xAxis);\n  //\n  //   const yAxis = axisLeft(yScale);\n  //   svg.select(\".y-axis\").call(yAxis);\n  //\n  //   // zoom\n  //   const zoomBehavior = zoom()\n  //     .scaleExtent([0.5, 5])\n  //     .translateExtent([\n  //       [0, 0],\n  //       [width, height],\n  //     ])\n  //     .on(\"zoom\", (event) => {\n  //       const zoomState = event.transform;\n  //       setCurrentZoomState(zoomState);\n  //     });\n  //\n  //   svg.call(zoomBehavior);\n  // }, [currentZoomState, data, dimensions]);\n  // return (\n  //   <React.Fragment>\n  //     <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n  //       <svg ref={svgRef}>\n  //         <defs>\n  //           <clipPath id={id}>\n  //             <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />\n  //           </clipPath>\n  //         </defs>\n  //         <g className=\"content\" clipPath={`url(#${id})`}></g>\n  //         <g className=\"x-axis\" />\n  //         <g className=\"y-axis\" />\n  //       </svg>\n  //     </div>\n  //   </React.Fragment>\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 10\n  }, this); // );\n}\n\n_c = ZoomableLineChart;\nexport default ZoomableLineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ZoomableLineChart\");","map":{"version":3,"sources":["/home/colin/Downloads/react-tut/stock_react/react_app/src/ZoomableLineChart.js"],"names":["React","useRef","useEffect","useState","select","scaleLinear","line","max","curveCardinal","axisBottom","axisLeft","zoom","useResizeObserver","ZoomableLineChart","data","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SACEC,MADF,EAEEC,WAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,QAPF,EAQEC,IARF,QASO,IATP;AAUA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA;AACA;AACA;;;;AAEA,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,EAAE,GAAG;AAAb,CAA3B,EAAiE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CA9F+D,CA+F/D;AACD;;KAhGQF,iB;AAkGT,eAAeA,iBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport {\n  select,\n  scaleLinear,\n  line,\n  max,\n  curveCardinal,\n  axisBottom,\n  axisLeft,\n  zoom,\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a ZoomableLineChart\n */\n\nfunction ZoomableLineChart({ data, id = \"myZoomableLineChart\" }) {\n  // const svgRef = useRef();\n  // const wrapperRef = useRef();\n  // const dimensions = useResizeObserver(wrapperRef);\n  // const [currentZoomState, setCurrentZoomState] = useState();\n  //\n  // // will be called initially and on every data change\n  // useEffect(() => {\n  //   const svg = select(svgRef.current);\n  //   const svgContent = svg.select(\".content\");\n  //   const { width, height } =\n  //     dimensions || wrapperRef.current.getBoundingClientRect();\n  //\n  //   // scales + line generator\n  //   const xScale = scaleLinear()\n  //     .domain([0, data.length - 1])\n  //     .range([10, width - 10]);\n  //\n  //   if (currentZoomState) {\n  //     const newXScale = currentZoomState.rescaleX(xScale);\n  //     xScale.domain(newXScale.domain());\n  //   }\n  //\n  //   const yScale = scaleLinear()\n  //     .domain([0, max(data)])\n  //     .range([height - 10, 10]);\n  //\n  //   const lineGenerator = line()\n  //     .x((d, index) => xScale(index))\n  //     .y((d) => yScale(d))\n  //     .curve(curveCardinal);\n  //\n  //   // render the line\n  //   svgContent\n  //     .selectAll(\".myLine\")\n  //     .data([data])\n  //     .join(\"path\")\n  //     .attr(\"class\", \"myLine\")\n  //     .attr(\"stroke\", \"black\")\n  //     .attr(\"fill\", \"none\")\n  //     .attr(\"d\", lineGenerator);\n  //\n  //   svgContent\n  //     .selectAll(\".myDot\")\n  //     .data(data)\n  //     .join(\"circle\")\n  //     .attr(\"class\", \"myDot\")\n  //     .attr(\"stroke\", \"black\")\n  //     .attr(\"r\", 4)\n  //     .attr(\"fill\", \"orange\")\n  //     .attr(\"cx\", (value, index) => xScale(index))\n  //     .attr(\"cy\", yScale);\n  //\n  //   // axes\n  //   const xAxis = axisBottom(xScale);\n  //   svg\n  //     .select(\".x-axis\")\n  //     .attr(\"transform\", `translate(0, ${height})`)\n  //     .call(xAxis);\n  //\n  //   const yAxis = axisLeft(yScale);\n  //   svg.select(\".y-axis\").call(yAxis);\n  //\n  //   // zoom\n  //   const zoomBehavior = zoom()\n  //     .scaleExtent([0.5, 5])\n  //     .translateExtent([\n  //       [0, 0],\n  //       [width, height],\n  //     ])\n  //     .on(\"zoom\", (event) => {\n  //       const zoomState = event.transform;\n  //       setCurrentZoomState(zoomState);\n  //     });\n  //\n  //   svg.call(zoomBehavior);\n  // }, [currentZoomState, data, dimensions]);\n\n  // return (\n  //   <React.Fragment>\n  //     <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n  //       <svg ref={svgRef}>\n  //         <defs>\n  //           <clipPath id={id}>\n  //             <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />\n  //           </clipPath>\n  //         </defs>\n  //         <g className=\"content\" clipPath={`url(#${id})`}></g>\n  //         <g className=\"x-axis\" />\n  //         <g className=\"y-axis\" />\n  //       </svg>\n  //     </div>\n  //   </React.Fragment>\n\n  return(<h1>test</h1>);\n  // );\n}\n\nexport default ZoomableLineChart;\n"]},"metadata":{},"sourceType":"module"}