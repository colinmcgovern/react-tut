{"ast":null,"code":"var _jsxFileName = \"/home/colin/Downloads/stock_react/react_app/src/BarChart.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select, axisBottom, axisRight, scaleLinear, scaleBand } from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useResizeObserver = ref => {\n  _s();\n\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\n_s(useResizeObserver, \"swpmFLcor9a4TnJ7R73Pli9/9G8=\");\n\nfunction BarChart({\n  data\n}) {\n  _s2();\n\n  let date_price = {};\n  data[0][\"values\"].forEach(v => {\n    date_price[v[\"datetime\"]] = v[\"open\"];\n  });\n  console.log(date_price);\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const myLine = line().x((value, index) => index * 50).y(value => 150 - value).curve(curveCardinal);\n    svg.selectAll(\"path\").data([data]).join(\"path\").attr(\"d\", value => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"blue\");\n  }, [data, dimensions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"y-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(BarChart, \"6bFCyBd3HKwDD6FYD4wxcBmp2CY=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/home/colin/Downloads/stock_react/react_app/src/BarChart.js"],"names":["React","useRef","useEffect","useState","select","axisBottom","axisRight","scaleLinear","scaleBand","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","BarChart","data","date_price","v","console","log","svgRef","wrapperRef","svg","myLine","line","x","value","index","y","curve","curveCardinal","selectAll","join","attr","marginBottom"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,WAAvC,EAAoDC,SAApD,QAAoE,IAApE;;;AAEA,MAAMC,iBAAiB,GAAIC,GAAD,IAAS;AAAA;;AAEjC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,IAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,aAAa,GAAGH,GAAG,CAACI,OAA1B;AACA,UAAMC,cAAc,GAAG,IAAIC,cAAJ,CAAoBC,OAAD,IAAa;AACrDA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvBP,QAAAA,aAAa,CAACO,KAAK,CAACC,WAAP,CAAb;AACD,OAFD;AAGD,KAJsB,CAAvB;AAMAL,IAAAA,cAAc,CAACM,OAAf,CAAuBR,aAAvB;AACA,WAAO,MAAM;AACXE,MAAAA,cAAc,CAACO,SAAf,CAAyBT,aAAzB;AACD,KAFD;AAID,GAbQ,EAaN,CAACH,GAAD,CAbM,CAAT;AAcA,SAAOC,UAAP;AACD,CAnBD;;GAAMF,iB;;AAqBN,SAASc,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAAyB;AAAA;;AAErB,MAAIC,UAAU,GAAG,EAAjB;AAEAD,EAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,EAAkBN,OAAlB,CAA2BQ,CAAD,IAAO;AAC/BD,IAAAA,UAAU,CAACC,CAAC,CAAC,UAAD,CAAF,CAAV,GAA4BA,CAAC,CAAC,MAAD,CAA7B;AACD,GAFD;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEA,QAAMI,MAAM,GAAG5B,MAAM,EAArB;AAEA,QAAM6B,UAAU,GAAG7B,MAAM,EAAzB;AAEA,QAAMU,UAAU,GAAGF,iBAAiB,CAACqB,UAAD,CAApC;AAEA5B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,GAAG,GAAG3B,MAAM,CAACyB,MAAM,CAACf,OAAR,CAAlB;AACA,UAAMkB,MAAM,GAAGC,IAAI,GAChBC,CADY,CACV,CAACC,KAAD,EAAQC,KAAR,KAAkBA,KAAK,GAAG,EADhB,EAEZC,CAFY,CAEVF,KAAK,IAAI,MAAMA,KAFL,EAGZG,KAHY,CAGNC,aAHM,CAAf;AAKFR,IAAAA,GAAG,CACAS,SADH,CACa,MADb,EAEGhB,IAFH,CAEQ,CAACA,IAAD,CAFR,EAGGiB,IAHH,CAGQ,MAHR,EAIGC,IAJH,CAIQ,GAJR,EAIaP,KAAK,IAAIH,MAAM,CAACG,KAAD,CAJ5B,EAKGO,IALH,CAKQ,MALR,EAKgB,MALhB,EAMGA,IANH,CAMQ,QANR,EAMkB,MANlB;AASC,GAhBQ,EAgBN,CAAClB,IAAD,EAAOb,UAAP,CAhBM,CAAT;AAkBA,sBACE;AAAK,IAAA,GAAG,EAAEmB,UAAV;AAAsB,IAAA,KAAK,EAAE;AAACa,MAAAA,YAAY,EAAE;AAAf,KAA7B;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEd,MAAV;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQH;;IA1CQN,Q;UAccd,iB;;;KAddc,Q;AA4CT,eAAeA,QAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport {select, axisBottom, axisRight, scaleLinear, scaleBand} from \"d3\"\n\nconst useResizeObserver = (ref) => {\n\n  const [dimensions, setDimensions] = useState(null);\n\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect)\n      })\n    });\n\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget)\n    }\n\n  }, [ref]);\n  return dimensions;\n}\n\nfunction BarChart({data}){\n\n    let date_price = {};\n\n    data[0][\"values\"].forEach((v) => {\n      date_price[v[\"datetime\"]] = v[\"open\"];\n    });\n\n    console.log(date_price);\n\n    const svgRef = useRef();\n\n    const wrapperRef = useRef();\n\n    const dimensions = useResizeObserver(wrapperRef);\n\n    useEffect(() => {\n      const svg = select(svgRef.current);\n      const myLine = line()\n        .x((value, index) => index * 50)\n        .y(value => 150 - value)\n        .curve(curveCardinal);\n\n    svg\n      .selectAll(\"path\")\n      .data([data])\n      .join(\"path\")\n      .attr(\"d\", value => myLine(value))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"blue\");\n\n\n    }, [data, dimensions]);\n\n    return(\n      <div ref={wrapperRef} style={{marginBottom: \"2rem\"}}>\n        <svg ref={svgRef}>\n          <g className=\"x-axis\"/>\n          <g className=\"y-axis\"/>\n        </svg>\n      </div>\n    );\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}